// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DrawAgents

struct Agent {
    float2 position;
    float angle;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> tex;
RWStructuredBuffer<Agent> Agents;

uint Width;
uint Height;
uint NumAgents;
float DeltaTime;

float nrand(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}

[numthreads(16,1,1)]
void DrawAgents (uint3 id : SV_DispatchThreadID)
{
    if(id.x > NumAgents) return;

    Agent agent = Agents[id.x];

    float speed = 100.0;
    float2 direction = float2(cos(agent.angle), sin(agent.angle));
    float2 newPos = agent.position + direction * speed * DeltaTime;

    if(newPos.x <= 0 || newPos.x >= Width)
        Agents[id.x].angle += 3.14 / 2;

    if(newPos.y <= 0 || newPos.y >= Height)
        Agents[id.x].angle += 3.14 / 2;

    Agents[id.x].position = newPos;

    tex[int2(newPos.x, newPos.y)] = float4(1, 1, 1, 1);
    //Result[id.xy] = float4(id.x / width, id.y / height, 0.0, 0.0);
}