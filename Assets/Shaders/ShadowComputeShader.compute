#pragma kernel ShadowComputeShader
#pragma kernel MoveTexturePixels

struct LightData {
    float angle;
    float range;
    float intensity;
    float4 color;
    float2 position;
    int isOn;
};

struct CircleData {
    float2 center;
    float radius;
};

struct BoxData {
    float2 center;
    float2 extents;
};

struct EdgeVertex {
    float2 position;
    int shapeIndex;
    float angleToShapeCenter;
};

//static float2 searchDirections[] = { float2(1.0, 0.0), float2(0.0, 1.0), float2(-1.0, 0.0), float2(0.0, -1.0) };

RWStructuredBuffer<LightData> lights;
RWStructuredBuffer<CircleData> circles;
RWStructuredBuffer<BoxData> boxes;

RWTexture2D<float4> shadowTexture;
RWTexture2D<float4> lightTexture;
AppendStructuredBuffer<EdgeVertex> edgeVertices;

float4 shadowColor;
int2 resolution;

static float EPSILON = 0.00001;
static float PI = 3.14;

int TestRaySphere(float2 p, float2 dir, float2 center, float radius)
{
        float2 m = p - center;
        float b = dot(m, dir);
        float c = dot(m, m) - radius * radius;

        if(c > 0.0 && b > 0.0) return 0;

        float disc = b * b - c;

        if(disc < 0.0) return 0;

        return 1;
}

int TestRayBox(float2 p0, float2 p1, float2 boxMin, float2 boxMax)
{
    float2 e = boxMax - boxMin; //Extents
    float2 d = p1 - p0;  //Segment half length vector
    float2 m = p0 + p1 - boxMin - boxMax; //Segment midpoint (some length)

    //Try world coor axes as seperating axes
    float adx = abs(d.x);
    if(abs(m.x) > e.x + adx) return 0;

    float ady = abs(d.y);
    if(abs(m.y) > e.y + ady) return 0;
    
    // Add in an epsilon term to counteract arithmetic errors when segment is
    // (near) parallel to a coordinate axis
    adx += EPSILON; ady += EPSILON;
    
    // Try cross products of segment direction vector with coordinate axes
    if (abs(m.x * d.y - m.y * d.x) > e.x * ady + e.y * adx) return 0;

    //if(p1.y < boxMin.y) return 0;

    return 1;
}

[numthreads(32,30,1)]
void ShadowComputeShader (uint3 id : SV_DispatchThreadID)
{
    float2 pixelPos = float2(id.x, id.y);

    shadowTexture[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
    lightTexture[id.xy] = float4(0.0, 0.0, 0.0, 0.0);

    for(int i = 0; i < lights.Length; i++)
    {
        if(lights[i].isOn == 0)
            continue;

        int totalIntersections = 0;

        float2 lightPos = lights[i].position;
        float lightRange = lights[i].range;
        
        float2 direction = float2(lightPos.x - pixelPos.x, lightPos.y - pixelPos.y);
        float distance = sqrt(pow(direction.x, 2) + pow(direction.y, 2));

        if(distance > lightRange)
            continue;
        
        //float lightAngle = lights[i].angle;
        //float angle = fmod(atan2(direction.y, -direction.x) + lightAngle + 2 * PI, 2 * PI);

        for(int j = 0; j < circles.Length; j++)
        {
            CircleData circle = circles[j];   
            //intersections += TestRaySphere(id.xy, directionNormalized, circle.center, circle.radius);
        }

        for(int k = 0; k < boxes.Length; k++)
        {
            float2 boxCenter = boxes[k].center;
            float2 extents = boxes[k].extents;
            float2 boxMin = boxCenter - extents;
            float2 boxMax = boxCenter + extents;

            int intersections = TestRayBox(lightPos, pixelPos, boxMin, boxMax);
            totalIntersections += intersections;

            if(intersections > 0)
            {
                //Find more accurate value rather than rounded off value
                float2 dir = float2(0.0, 0.0);
                
                if(TestRayBox(lightPos, float2(pixelPos.x + 1.0, pixelPos.y), boxMin, boxMax) == 0)
                {
                    dir.x = 1.0;
                } 
                else if(TestRayBox(lightPos, float2(pixelPos.x - 1.0, pixelPos.y), boxMin, boxMax) == 0)
                {
                    dir.x = -1.0;
                }

                if(TestRayBox(lightPos, float2(pixelPos.x, pixelPos.y + 1.0), boxMin, boxMax) == 0)
                {
                    dir.y = 1.0;
                }
                else if(TestRayBox(lightPos, float2(pixelPos.x, pixelPos.y - 1.0), boxMin, boxMax) == 0)
                {                
                    dir.y = -1.0;
                }

                bool isEdgeVertex = false;
                float2 vertex;

                if(abs(dir.x) > 0.0 || abs(dir.y) > 0.0)
                {
                    bool intersecting = true; 
                    float maxSteps = 100;
                    float stepSize = 1 / maxSteps;
                    float steps = 0.0;

                    while(intersecting == true && steps < maxSteps)
                    {
                        steps += 1.0;
                        intersecting = TestRayBox(lightPos, pixelPos + dir * stepSize * steps, boxMin, boxMax) > 0;
                    }

                    vertex = pixelPos + dir * stepSize * steps;
                    isEdgeVertex = true;
                }

                if(pixelPos.x == 0 || pixelPos.y == 0 || pixelPos.x == resolution.x || pixelPos.y == resolution.y)
                {
                    isEdgeVertex = true;
                    vertex = pixelPos;
                }

                if(isEdgeVertex)
                {
                    EdgeVertex v;
                    v.position = vertex;
                    v.shapeIndex = i * max(lights.Length, boxes.Length) + k;
                    
                    float2 distToShapeCenter = v.position - boxCenter;
                    v.angleToShapeCenter = atan2(distToShapeCenter.y, distToShapeCenter.x) + 2.0 * PI % (2.0 * PI) + 10.0 * v.shapeIndex;

                    edgeVertices.Append(v);
                    lightTexture[id.xy] = float4(1.0, 0.0, 0.0, 1.0);
                }
            } else {
            }
        }

        if(totalIntersections > 0)
        {
            //shadowTexture[id.xy] = shadowColor;
        } else {
                float outerRadius = 300.0;
                float innerRadius = lightRange - outerRadius;

                float constantAtt = 1.0;
                float linearAtt = 0.0;
                float quadraticAtt = 1.0;
                float attenuation = (1.0 / (constantAtt + linearAtt * distance / lightRange + quadraticAtt * ((distance/lightRange) * (distance / lightRange))));

                if(distance > innerRadius)
                {
                    attenuation *= 1.0 - (distance - innerRadius) / outerRadius;
                }
                float4 diffuse = lights[i].color * lights[i].intensity * attenuation;
                            
                lightTexture[id.xy] += diffuse;
        }
    }
}


[numthreads(32,30,1)]
void MoveTexturePixels (uint3 id : SV_DispatchThreadID)
{
    shadowTexture[id.xy] = float4(1.0, 0.0, 1.0, 1.0) * 0.1;
    lightTexture[id.xy] = float4(1.0, 0.0, 1.0, 1.0) * 0.1;
}